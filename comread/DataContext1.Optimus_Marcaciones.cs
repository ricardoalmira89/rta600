//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 21/08/2014 12:20:36
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace OptimusContext
{

    /// <summary>
    /// There are no comments for OptimusContext.Optimus_Marcaciones in the schema.
    /// </summary>
    [Table(Name = @"optimus.optimus_marcaciones")]
    public partial class Optimus_Marcaciones : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Tarjeta;

        private System.DateTime _Fecha;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnTarjetaChanging(string value);
        partial void OnTarjetaChanged();
        partial void OnFechaChanging(System.DateTime value);
        partial void OnFechaChanged();
        #endregion

        public Optimus_Marcaciones()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tarjeta in the schema.
        /// </summary>
        [Column(Name = @"tarjeta", Storage = "_Tarjeta", CanBeNull = false, DbType = "VARCHAR(10) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Tarjeta
        {
            get
            {
                return this._Tarjeta;
            }
            set
            {
                if (this._Tarjeta != value)
                {
                    this.OnTarjetaChanging(value);
                    this.SendPropertyChanging();
                    this._Tarjeta = value;
                    this.SendPropertyChanged("Tarjeta");
                    this.OnTarjetaChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fecha in the schema.
        /// </summary>
        [Column(Name = @"fecha", Storage = "_Fecha", CanBeNull = false, DbType = "DATETIME NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime Fecha
        {
            get
            {
                return this._Fecha;
            }
            set
            {
                if (this._Fecha != value)
                {
                    this.OnFechaChanging(value);
                    this.SendPropertyChanging();
                    this._Fecha = value;
                    this.SendPropertyChanged("Fecha");
                    this.OnFechaChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
