//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 15/05/2015 12:58:41
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace OptimusContext
{

    /// <summary>
    /// There are no comments for OptimusContext.LibraryLibrarian in the schema.
    /// </summary>
    [Table(Name = @"shirka_v2.library_librarians")]
    public partial class LibraryLibrarian : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _OfficeId;

        private string _Username;

        private string _Password;

        private System.Nullable<System.DateTime> _DateReg;

        private System.Nullable<System.DateTime> _LastLogin;

        private string _FullName;

        private string _Email;

        private short _Sex;

        private int _IdXabal;

        private string _Identification;

        private string _Phone;

        private string _Address;

        private string _Card;

        private System.Nullable<int> _ScheduleId;
        #pragma warning restore 0649

        private EntityRef<RhSchedule> _RhSchedule;

        private EntitySet<RhIncidence> _RhIncidences;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnOfficeIdChanging(System.Nullable<int> value);
        partial void OnOfficeIdChanged();
        partial void OnUsernameChanging(string value);
        partial void OnUsernameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnDateRegChanging(System.Nullable<System.DateTime> value);
        partial void OnDateRegChanged();
        partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
        partial void OnLastLoginChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnSexChanging(short value);
        partial void OnSexChanged();
        partial void OnIdXabalChanging(int value);
        partial void OnIdXabalChanged();
        partial void OnIdentificationChanging(string value);
        partial void OnIdentificationChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCardChanging(string value);
        partial void OnCardChanged();
        partial void OnScheduleIdChanging(System.Nullable<int> value);
        partial void OnScheduleIdChanged();
        #endregion

        public LibraryLibrarian()
        {
            this._RhSchedule  = default(EntityRef<RhSchedule>);
            this._RhIncidences = new EntitySet<RhIncidence>(new Action<RhIncidence>(this.attach_RhIncidences), new Action<RhIncidence>(this.detach_RhIncidences));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for OfficeId in the schema.
        /// </summary>
        [Column(Name = @"office_id", Storage = "_OfficeId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> OfficeId
        {
            get
            {
                return this._OfficeId;
            }
            set
            {
                if (this._OfficeId != value)
                {
                    this.OnOfficeIdChanging(value);
                    this.SendPropertyChanging();
                    this._OfficeId = value;
                    this.SendPropertyChanged("OfficeId");
                    this.OnOfficeIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Username in the schema.
        /// </summary>
        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging();
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"`password`", Storage = "_Password", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for DateReg in the schema.
        /// </summary>
        [Column(Name = @"date_reg", Storage = "_DateReg", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> DateReg
        {
            get
            {
                return this._DateReg;
            }
            set
            {
                if (this._DateReg != value)
                {
                    this.OnDateRegChanging(value);
                    this.SendPropertyChanging();
                    this._DateReg = value;
                    this.SendPropertyChanged("DateReg");
                    this.OnDateRegChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LastLogin in the schema.
        /// </summary>
        [Column(Name = @"last_login", Storage = "_LastLogin", DbType = "DATETIME NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<System.DateTime> LastLogin
        {
            get
            {
                return this._LastLogin;
            }
            set
            {
                if (this._LastLogin != value)
                {
                    this.OnLastLoginChanging(value);
                    this.SendPropertyChanging();
                    this._LastLogin = value;
                    this.SendPropertyChanged("LastLogin");
                    this.OnLastLoginChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for FullName in the schema.
        /// </summary>
        [Column(Name = @"full_name", Storage = "_FullName", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FullName
        {
            get
            {
                return this._FullName;
            }
            set
            {
                if (this._FullName != value)
                {
                    this.OnFullNameChanging(value);
                    this.SendPropertyChanging();
                    this._FullName = value;
                    this.SendPropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Name = @"email", Storage = "_Email", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Sex in the schema.
        /// </summary>
        [Column(Name = @"sex", Storage = "_Sex", CanBeNull = false, DbType = "SMALLINT(6) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public short Sex
        {
            get
            {
                return this._Sex;
            }
            set
            {
                if (this._Sex != value)
                {
                    this.OnSexChanging(value);
                    this.SendPropertyChanging();
                    this._Sex = value;
                    this.SendPropertyChanged("Sex");
                    this.OnSexChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IdXabal in the schema.
        /// </summary>
        [Column(Name = @"id_xabal", Storage = "_IdXabal", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int IdXabal
        {
            get
            {
                return this._IdXabal;
            }
            set
            {
                if (this._IdXabal != value)
                {
                    this.OnIdXabalChanging(value);
                    this.SendPropertyChanging();
                    this._IdXabal = value;
                    this.SendPropertyChanged("IdXabal");
                    this.OnIdXabalChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Identification in the schema.
        /// </summary>
        [Column(Name = @"identification", Storage = "_Identification", CanBeNull = false, DbType = "VARCHAR(25) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Identification
        {
            get
            {
                return this._Identification;
            }
            set
            {
                if (this._Identification != value)
                {
                    this.OnIdentificationChanging(value);
                    this.SendPropertyChanging();
                    this._Identification = value;
                    this.SendPropertyChanged("Identification");
                    this.OnIdentificationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Name = @"phone", Storage = "_Phone", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Name = @"address", Storage = "_Address", DbType = "VARCHAR(255) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Card in the schema.
        /// </summary>
        [Column(Name = @"card", Storage = "_Card", DbType = "VARCHAR(10) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Card
        {
            get
            {
                return this._Card;
            }
            set
            {
                if (this._Card != value)
                {
                    this.OnCardChanging(value);
                    this.SendPropertyChanging();
                    this._Card = value;
                    this.SendPropertyChanged("Card");
                    this.OnCardChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ScheduleId in the schema.
        /// </summary>
        [Column(Name = @"schedule_id", Storage = "_ScheduleId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ScheduleId
        {
            get
            {
                return this._ScheduleId;
            }
            set
            {
                if (this._ScheduleId != value)
                {
                    if (this._RhSchedule.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnScheduleIdChanging(value);
                    this.SendPropertyChanging();
                    this._ScheduleId = value;
                    this.SendPropertyChanged("ScheduleId");
                    this.OnScheduleIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RhSchedule in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RhSchedule_LibraryLibrarian", Storage="_RhSchedule", ThisKey="ScheduleId", OtherKey="Id", IsForeignKey=true)]
        public RhSchedule RhSchedule
        {
            get
            {
                return this._RhSchedule.Entity;
            }
            set
            {
                RhSchedule previousValue = this._RhSchedule.Entity;
                if ((previousValue != value) || (this._RhSchedule.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._RhSchedule.Entity = null;
                        previousValue.LibraryLibrarians.Remove(this);
                    }
                    this._RhSchedule.Entity = value;
                    if (value != null)
                    {
                        this._ScheduleId = value.Id;
                        value.LibraryLibrarians.Add(this);
                    }
                    else
                    {
                        this._ScheduleId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("RhSchedule");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RhIncidences in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LibraryLibrarian_RhIncidence", Storage="_RhIncidences", ThisKey="Id", OtherKey="LibrarianId", DeleteRule="RESTRICT")]
        public EntitySet<RhIncidence> RhIncidences
        {
            get
            {
                return this._RhIncidences;
            }
            set
            {
                this._RhIncidences.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_RhIncidences(RhIncidence entity)
        {
            this.SendPropertyChanging("RhIncidences");
            entity.LibraryLibrarian = this;
        }
    
        private void detach_RhIncidences(RhIncidence entity)
        {
            this.SendPropertyChanging("RhIncidences");
            entity.LibraryLibrarian = null;
        }
    }

}
