//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 15/05/2015 12:58:41
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace OptimusContext
{

    /// <summary>
    /// There are no comments for OptimusContext.RhIncidence in the schema.
    /// </summary>
    [Table(Name = @"shirka_v2.rh_incidence")]
    public partial class RhIncidence : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _IncidenceKindId;

        private System.Nullable<int> _IncidenceStateId;

        private System.Nullable<double> _Hours;

        private System.Nullable<int> _MarkId;

        private System.Nullable<int> _LibrarianId;
        #pragma warning restore 0649

        private EntityRef<RhMark> _RhMark;

        private EntityRef<LibraryLibrarian> _LibraryLibrarian;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnIncidenceKindIdChanging(System.Nullable<int> value);
        partial void OnIncidenceKindIdChanged();
        partial void OnIncidenceStateIdChanging(System.Nullable<int> value);
        partial void OnIncidenceStateIdChanged();
        partial void OnHoursChanging(System.Nullable<double> value);
        partial void OnHoursChanged();
        partial void OnMarkIdChanging(System.Nullable<int> value);
        partial void OnMarkIdChanged();
        partial void OnLibrarianIdChanging(System.Nullable<int> value);
        partial void OnLibrarianIdChanged();
        #endregion

        public RhIncidence()
        {
            this._RhMark  = default(EntityRef<RhMark>);
            this._LibraryLibrarian  = default(EntityRef<LibraryLibrarian>);
            OnCreated();
        }
   
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IncidenceKindId in the schema.
        /// </summary>
        [Column(Name = @"incidence_kind_id", Storage = "_IncidenceKindId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IncidenceKindId
        {
            get
            {
                return this._IncidenceKindId;
            }
            set
            {
                if (this._IncidenceKindId != value)
                {
                    this.OnIncidenceKindIdChanging(value);
                    this.SendPropertyChanging();
                    this._IncidenceKindId = value;
                    this.SendPropertyChanged("IncidenceKindId");
                    this.OnIncidenceKindIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IncidenceStateId in the schema.
        /// </summary>
        [Column(Name = @"incidence_state_id", Storage = "_IncidenceStateId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> IncidenceStateId
        {
            get
            {
                return this._IncidenceStateId;
            }
            set
            {
                if (this._IncidenceStateId != value)
                {
                    this.OnIncidenceStateIdChanging(value);
                    this.SendPropertyChanging();
                    this._IncidenceStateId = value;
                    this.SendPropertyChanged("IncidenceStateId");
                    this.OnIncidenceStateIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Hours in the schema.
        /// </summary>
        [Column(Name = @"hours", Storage = "_Hours", DbType = "DOUBLE NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<double> Hours
        {
            get
            {
                return this._Hours;
            }
            set
            {
                if (this._Hours != value)
                {
                    this.OnHoursChanging(value);
                    this.SendPropertyChanging();
                    this._Hours = value;
                    this.SendPropertyChanged("Hours");
                    this.OnHoursChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for MarkId in the schema.
        /// </summary>
        [Column(Name = @"mark_id", Storage = "_MarkId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> MarkId
        {
            get
            {
                return this._MarkId;
            }
            set
            {
                if (this._MarkId != value)
                {
                    if (this._RhMark.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnMarkIdChanging(value);
                    this.SendPropertyChanging();
                    this._MarkId = value;
                    this.SendPropertyChanged("MarkId");
                    this.OnMarkIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LibrarianId in the schema.
        /// </summary>
        [Column(Name = @"librarian_id", Storage = "_LibrarianId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> LibrarianId
        {
            get
            {
                return this._LibrarianId;
            }
            set
            {
                if (this._LibrarianId != value)
                {
                    if (this._LibraryLibrarian.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnLibrarianIdChanging(value);
                    this.SendPropertyChanging();
                    this._LibrarianId = value;
                    this.SendPropertyChanged("LibrarianId");
                    this.OnLibrarianIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RhMark in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="RhMark_RhIncidence", Storage="_RhMark", ThisKey="MarkId", OtherKey="Id", IsForeignKey=true)]
        public RhMark RhMark
        {
            get
            {
                return this._RhMark.Entity;
            }
            set
            {
                RhMark previousValue = this._RhMark.Entity;
                if ((previousValue != value) || (this._RhMark.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._RhMark.Entity = null;
                        previousValue.RhIncidences.Remove(this);
                    }
                    this._RhMark.Entity = value;
                    if (value != null)
                    {
                        this._MarkId = value.Id;
                        value.RhIncidences.Add(this);
                    }
                    else
                    {
                        this._MarkId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("RhMark");
                }
            }
        }

    
        /// <summary>
        /// There are no comments for LibraryLibrarian in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LibraryLibrarian_RhIncidence", Storage="_LibraryLibrarian", ThisKey="LibrarianId", OtherKey="Id", IsForeignKey=true)]
        public LibraryLibrarian LibraryLibrarian
        {
            get
            {
                return this._LibraryLibrarian.Entity;
            }
            set
            {
                LibraryLibrarian previousValue = this._LibraryLibrarian.Entity;
                if ((previousValue != value) || (this._LibraryLibrarian.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._LibraryLibrarian.Entity = null;
                        previousValue.RhIncidences.Remove(this);
                    }
                    this._LibraryLibrarian.Entity = value;
                    if (value != null)
                    {
                        this._LibrarianId = value.Id;
                        value.RhIncidences.Add(this);
                    }
                    else
                    {
                        this._LibrarianId = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("LibraryLibrarian");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
