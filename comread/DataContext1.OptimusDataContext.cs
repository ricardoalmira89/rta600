//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 21/08/2014 12:20:36
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace OptimusContext
{

    [DatabaseAttribute(Name = "optimus")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class OptimusDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(OptimusDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertOptimus_Marcaciones(Optimus_Marcaciones instance);
        partial void UpdateOptimus_Marcaciones(Optimus_Marcaciones instance);
        partial void DeleteOptimus_Marcaciones(Optimus_Marcaciones instance);

        #endregion

        public OptimusDataContext() :
        base(GetConnectionString("OptimuDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public OptimusDataContext(MappingSource mappingSource) :
        base(GetConnectionString("OptimuDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public OptimusDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public OptimusDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public OptimusDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public OptimusDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Optimus_Marcaciones> Optimus_Marcaciones
        {
            get
            {
                return this.GetTable<Optimus_Marcaciones>();
            }
        }
    }
}
