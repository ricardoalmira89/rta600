//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 5/18/2015 6:50:40 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace OptimusContext
{

    /// <summary>
    /// There are no comments for OptimusContext.LibraryOffice in the schema.
    /// </summary>
    [Table(Name = @"shirka_v2.library_offices")]
    public partial class LibraryOffice : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private System.Nullable<int> _ManagementId;

        private System.Nullable<int> _GroupId;

        private string _Office;

        private string _Slug;

        private System.Nullable<bool> _CanBeVisited;

        private System.Nullable<bool> _PublicOffice;

        private string _Code;

        private System.Nullable<int> _BossId;
        #pragma warning restore 0649

        private EntitySet<LibraryLibrarian> _Librarian;
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnManagementIdChanging(System.Nullable<int> value);
        partial void OnManagementIdChanged();
        partial void OnGroupIdChanging(System.Nullable<int> value);
        partial void OnGroupIdChanged();
        partial void OnOfficeChanging(string value);
        partial void OnOfficeChanged();
        partial void OnSlugChanging(string value);
        partial void OnSlugChanged();
        partial void OnCanBeVisitedChanging(System.Nullable<bool> value);
        partial void OnCanBeVisitedChanged();
        partial void OnPublicOfficeChanging(System.Nullable<bool> value);
        partial void OnPublicOfficeChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnBossIdChanging(System.Nullable<int> value);
        partial void OnBossIdChanged();
        #endregion

        public LibraryOffice()
        {
            this._Librarian = new EntitySet<LibraryLibrarian>(new Action<LibraryLibrarian>(this.attach_Librarian), new Action<LibraryLibrarian>(this.detach_Librarian));
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging();
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ManagementId in the schema.
        /// </summary>
        [Column(Name = @"management_id", Storage = "_ManagementId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> ManagementId
        {
            get
            {
                return this._ManagementId;
            }
            set
            {
                if (this._ManagementId != value)
                {
                    this.OnManagementIdChanging(value);
                    this.SendPropertyChanging();
                    this._ManagementId = value;
                    this.SendPropertyChanged("ManagementId");
                    this.OnManagementIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GroupId in the schema.
        /// </summary>
        [Column(Name = @"group_id", Storage = "_GroupId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> GroupId
        {
            get
            {
                return this._GroupId;
            }
            set
            {
                if (this._GroupId != value)
                {
                    this.OnGroupIdChanging(value);
                    this.SendPropertyChanging();
                    this._GroupId = value;
                    this.SendPropertyChanged("GroupId");
                    this.OnGroupIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Office in the schema.
        /// </summary>
        [Column(Name = @"office", Storage = "_Office", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Office
        {
            get
            {
                return this._Office;
            }
            set
            {
                if (this._Office != value)
                {
                    this.OnOfficeChanging(value);
                    this.SendPropertyChanging();
                    this._Office = value;
                    this.SendPropertyChanged("Office");
                    this.OnOfficeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Slug in the schema.
        /// </summary>
        [Column(Name = @"slug", Storage = "_Slug", CanBeNull = false, DbType = "VARCHAR(255) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Slug
        {
            get
            {
                return this._Slug;
            }
            set
            {
                if (this._Slug != value)
                {
                    this.OnSlugChanging(value);
                    this.SendPropertyChanging();
                    this._Slug = value;
                    this.SendPropertyChanged("Slug");
                    this.OnSlugChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CanBeVisited in the schema.
        /// </summary>
        [Column(Name = @"can_be_visited", Storage = "_CanBeVisited", DbType = "TINYINT(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> CanBeVisited
        {
            get
            {
                return this._CanBeVisited;
            }
            set
            {
                if (this._CanBeVisited != value)
                {
                    this.OnCanBeVisitedChanging(value);
                    this.SendPropertyChanging();
                    this._CanBeVisited = value;
                    this.SendPropertyChanged("CanBeVisited");
                    this.OnCanBeVisitedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PublicOffice in the schema.
        /// </summary>
        [Column(Name = @"public_office", Storage = "_PublicOffice", DbType = "TINYINT(1) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<bool> PublicOffice
        {
            get
            {
                return this._PublicOffice;
            }
            set
            {
                if (this._PublicOffice != value)
                {
                    this.OnPublicOfficeChanging(value);
                    this.SendPropertyChanging();
                    this._PublicOffice = value;
                    this.SendPropertyChanged("PublicOffice");
                    this.OnPublicOfficeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Code in the schema.
        /// </summary>
        [Column(Name = @"code", Storage = "_Code", CanBeNull = false, DbType = "VARCHAR(2) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this.SendPropertyChanging();
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BossId in the schema.
        /// </summary>
        [Column(Name = @"boss_id", Storage = "_BossId", DbType = "INT(11) NULL", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<int> BossId
        {
            get
            {
                return this._BossId;
            }
            set
            {
                if (this._BossId != value)
                {
                    this.OnBossIdChanging(value);
                    this.SendPropertyChanging();
                    this._BossId = value;
                    this.SendPropertyChanged("BossId");
                    this.OnBossIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Librarian in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="LibraryOffice_LibraryLibrarian", Storage="_Librarian", ThisKey="Id", OtherKey="OfficeId", DeleteRule="RESTRICT")]
        public EntitySet<LibraryLibrarian> Librarian
        {
            get
            {
                return this._Librarian;
            }
            set
            {
                this._Librarian.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Librarian(LibraryLibrarian entity)
        {
            this.SendPropertyChanging("Librarian");
            entity.Office = this;
        }
    
        private void detach_Librarian(LibraryLibrarian entity)
        {
            this.SendPropertyChanging("Librarian");
            entity.Office = null;
        }
    }

}
